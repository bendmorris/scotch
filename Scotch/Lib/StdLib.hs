module Scotch.Lib.StdLib where

import Scotch.Types.Types

stdlib = [[],[],[(Call (Var "std.lib.head") [Concat (Var "h") (Var "t")],Var "h"),(Call (Var "std.lib.head") [List []],List [])],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[(Call (Var "std.lib.tail") [Concat (Var "h") (Var "t")],Var "t"),(Call (Var "std.lib.tail") [List []],List [])],[(Call (Var "std.lib.left") [Concat (Var "h") (Var "t"),Var "n"],Take (Var "n") (Concat (Var "h") (Var "t"))),(Call (Var "std.lib.left") [Concat (Var "h") (Var "t"),Val (NumInt 0)],List []),(Call (Var "std.lib.left") [List [],Var "n"],List [])],[],[],[],[],[(Call (Var "std.lib.join") [Concat (Var "h") (Var "t"),Var "s"],If (Call (Var "bool") [Eq (Var "t") (List [])]) (Var "h") (Add (Add (Var "h") (Var "s")) (Call (Var "join") [Var "t",Var "s"]))),(Call (Var "std.lib.join") [List [],Var "s"],Val (Str "")),(Var "std.lib.reduce",Var "foldl")],[],[],[],[(Call (Var "std.lib.last") [Concat (Var "h") (Var "t")],EagerDef (Var "l") (Concat (Var "h") (Var "t")) (Subs (Sub (Call (Var "len") [Var "l"]) (Val (NumInt 1))) (Var "l")))],[(Call (Var "std.lib.prod") [Concat (Var "h") (Var "t")],Call (Var "foldr") [Val (Lambda ["x","y"] (Prod (Var "x") (Var "y"))),Concat (Var "h") (Var "t"),Val (NumInt 1)])],[(Call (Var "std.lib.&") [Var "x",Var "y"],And (Var "x") (Var "y"))],[],[],[(Call (Var "std.lib.repeat") [Var "f",Var "r",Var "n"],Call (Var "repeat") [Var "f",Call (Var "f") [Var "r"],Sub (Var "n") (Val (NumInt 1))]),(Call (Var "std.lib.repeat") [Var "f",Var "r",Val (NumInt 0)],Var "r")],[(Var "std.lib.length",Var "len"),(Call (Var "std.lib.*") [Var "x",Var "y"],Prod (Var "x") (Var "y"))],[(Call (Var "std.lib.+") [Var "x",Var "y"],Add (Var "x") (Var "y"))],[],[(Call (Var "std.lib.-") [Var "x",Var "y"],Sub (Var "x") (Var "y"))],[(Call (Var "std.lib.filter") [Var "f",Var "l"],For "i" (Call (Var "list") [Var "l"]) (Var "i") [Call (Var "f") [Var "i"]]),(Call (Var "std.lib.filter") [Var "f",List []],List [])],[(Call (Var "std.lib./") [Var "x",Var "y"],Div (Var "x") (Var "y"))],[],[(Call (Var "std.lib.show") [Var "a"],Call (Var "str") [Var "a"])],[(Call (Var "std.lib.only") [Concat (Var "h") (Var "t"),Var "s"],Add (If (Call (Var "bool") [Call (Var "contains") [Var "s",Var "h"]]) (Var "h") (Val (Str ""))) (Call (Var "only") [Var "t",Var "s"])),(Call (Var "std.lib.only") [List [],Var "s"],List [])],[],[],[],[(Call (Var "std.lib.prefix") [Concat (Var "a") (Var "b"),Concat (Var "c") (Var "d")],If (Call (Var "bool") [Eq (Var "a") (Var "c")]) (Call (Var "prefix") [Var "b",Var "d"]) (Val (Bit False))),(Call (Var "std.lib.prefix") [List [],Var "c"],Val (Bit True)),(Call (Var "std.lib.prefix") [Var "a",List []],Val (Bit False))],[],[(Call (Var "std.lib.sort") [Concat (Var "h") (Var "t")],Call (Var "qsort") [Concat (Var "h") (Var "t")])],[],[],[],[],[(Call (Var "std.lib.suffix") [Var "a",Var "c"],Call (Var "prefix") [Call (Var "reverse") [Var "a"],Call (Var "reverse") [Var "c"]]),(Call (Var "std.lib.insert") [Var "x",Concat (Var "h") (Var "t"),Var "a"],If (Call (Var "bool") [Gt (Var "x") (Var "h")]) (Add (Var "h") (Call (Var "insert") [Var "x",Var "t"])) (Add (Add (List [Var "x"]) (List [Var "h"])) (Var "t"))),(Call (Var "std.lib.insert") [Var "x",List [],Var "a"],Add (Var "a") (Var "x"))],[],[(Call (Var "std.lib.contains") [Concat (Var "h") (Var "t"),Var "s"],If (Call (Var "bool") [Eq (Var "h") (Var "s")]) (Val (Bit True)) (Call (Var "contains") [Var "t",Var "s"])),(Call (Var "std.lib.contains") [List [],Var "s"],Val (Bit False))],[],[],[],[],[],[],[(Call (Var "std.lib.lstrip") [Concat (Var "h") (Var "t"),Var "s"],If (Call (Var "bool") [Call (Var "contains") [Var "s",Var "h"]]) (Call (Var "lstrip") [Var "t",Var "s"]) (Concat (Var "h") (Var "t"))),(Call (Var "std.lib.lstrip") [List [],Var "s"],List []),(Call (Var "std.lib.lstrip") [Concat (Var "h") (Var "t")],Call (Var "lstrip") [Concat (Var "h") (Var "t"),Val (Str " ")])],[(Call (Var "std.lib.insort") [Concat (Var "h") (Var "t")],Call (Var "insert") [Var "h",Call (Var "insort") [Var "t"]]),(Call (Var "std.lib.insort") [List []],List [])],[],[],[],[],[(Call (Var "std.lib.rstrip") [Var "a",Var "s"],Call (Var "reverse") [Call (Var "lstrip") [Call (Var "reverse") [Var "a"],Var "s"]]),(Call (Var "std.lib.rstrip") [Concat (Var "h") (Var "t")],Call (Var "rstrip") [Concat (Var "h") (Var "t"),Val (Str " ")])],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[(Call (Var "std.lib.^") [Var "x",Var "y"],Exp (Var "x") (Var "y")),(Call (Var "std.lib.!=") [Var "x",Var "y"],InEq (Var "x") (Var "y"))],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[(Call (Var "std.lib.all") [Var "l"],Call (Var "foldr") [Val (Lambda ["x","y"] (And (Var "x") (Var "y"))),Var "l",Val (Bit True)])],[],[],[],[],[(Call (Var "std.lib.map") [Var "f",Var "l"],For "i" (Call (Var "list") [Var "l"]) (Call (Var "f") [Var "i"]) [])],[(Call (Var "std.lib.len") [Concat (Var "h") (Var "t"),Var "a"],Call (Var "len") [Var "t",Add (Var "a") (Val (NumInt 1))]),(Call (Var "std.lib.len") [List [],Var "a"],Var "a"),(Call (Var "std.lib.len") [Var "l"],Call (Var "len") [Var "l",Val (NumInt 0)])],[],[],[(Call (Var "std.lib.==") [Var "x",Var "y"],Eq (Var "x") (Var "y"))],[],[(Call (Var "std.lib.|") [Var "x",Var "y"],Or (Var "x") (Var "y"))],[],[],[],[(Call (Var "std.lib.any") [Var "l"],Call (Var "foldr") [Val (Lambda ["x","y"] (Or (Var "x") (Var "y"))),Var "l",Val (Bit False)])],[(Call (Var "std.lib.foldl") [Var "f",Concat (Var "h") (Var "t"),Var "z"],Call (Var "foldl") [Var "f",Var "t",Call (Var "f") [Var "z",Var "h"]]),(Call (Var "std.lib.foldl") [Var "f",List [],Var "z"],Var "z")],[],[],[(Call (Var "std.lib.replace") [Concat (Var "h") (Var "t"),Var "s",Var "r"],If (Call (Var "bool") [Call (Var "prefix") [Concat (Var "h") (Var "t"),Var "s"]]) (Add (Var "r") (Call (Var "replace") [Call (Var "right") [Concat (Var "h") (Var "t"),Sub (Call (Var "len") [Concat (Var "h") (Var "t")]) (Call (Var "len") [Var "s"])],Var "s",Var "r"])) (Add (Var "h") (Call (Var "replace") [Var "t",Var "s",Var "r"]))),(Call (Var "std.lib.replace") [List [],Var "s",Var "r"],List [])],[],[],[(Call (Var "std.lib.foldr") [Var "f",Concat (Var "h") (Var "t"),Var "z"],Call (Var "f") [Var "h",Call (Var "foldr") [Var "f",Var "t",Var "z"]]),(Call (Var "std.lib.foldr") [Var "f",List [],Var "z"],Var "z")],[],[],[],[(Var "std.lib.license",Val (Proc [Import ["std","license"] ["std","license"]])),(Var "std.lib.about",Val (Proc [Import ["std","about"] ["std","about"]])),(Call (Var "std.lib.zip") [Concat (Var "a") (Var "b"),Concat (Var "c") (Var "d")],Add (List [List [Var "a",Var "c"]]) (Call (Var "zip") [Var "b",Var "d"])),(Call (Var "std.lib.zip") [List [],List []],List []),(Call (Var "std.lib.zip") [List [],Concat (Var "c") (Var "d")],List []),(Call (Var "std.lib.zip") [Concat (Var "a") (Var "b"),List []],List []),(Call (Var "std.lib.zip") [Concat (Var "a") (Var "b"),Concat (Var "c") (Var "d"),Var "f"],Add (List [Call (Var "f") [Var "a",Var "c"]]) (Call (Var "zip") [Var "b",Var "d",Var "f"])),(Call (Var "std.lib.zip") [List [],List [],Var "f"],List []),(Call (Var "std.lib.zip") [List [],Concat (Var "c") (Var "d"),Var "f"],List []),(Call (Var "std.lib.zip") [Concat (Var "a") (Var "b"),List [],Var "f"],List [])],[],[(Call (Var "std.lib.sum") [Concat (Var "h") (Var "t"),Var "s"],Call (Var "foldr") [Val (Lambda ["x","y"] (Add (Var "x") (Var "y"))),Concat (Var "h") (Var "t"),Var "s"]),(Call (Var "std.lib.sum") [Var "l"],Call (Var "sum") [Var "l",Val (NumInt 0)])],[(Call (Var "std.lib.infix") [Concat (Var "a") (Var "b"),Concat (Var "c") (Var "d")],If (Call (Var "bool") [Call (Var "prefix") [Concat (Var "a") (Var "b"),Concat (Var "c") (Var "d")]]) (Val (Bit True)) (Call (Var "prefix") [Concat (Var "a") (Var "b"),Var "d"])),(Call (Var "std.lib.infix") [Concat (Var "a") (Var "b"),Var "d"],Val (Bit False)),(Call (Var "std.lib.right") [Concat (Var "h") (Var "t"),Var "n"],EagerDef (Var "l") (Call (Var "len") [Concat (Var "h") (Var "t")]) (For "i" (Call (Var "list") [Range (Sub (Var "l") (Var "n")) (Sub (Var "l") (Val (NumInt 1))) (Val (NumInt 1))]) (Subs (Var "i") (Concat (Var "h") (Var "t"))) []))],[],[],[],[],[],[],[],[],[],[],[(Call (Var "std.lib.count") [Concat (Var "h") (Var "t"),Var "s",Var "a"],Call (Var "count") [Var "t",Var "s",Add (Var "a") (If (Call (Var "bool") [Call (Var "prefix") [Concat (Var "h") (Var "t"),Var "s"]]) (Val (NumInt 1)) (Val (NumInt 0)))]),(Call (Var "std.lib.count") [List [],Var "s",Var "a"],Var "a"),(Call (Var "std.lib.count") [Var "l",Var "s"],Call (Var "count") [Var "l",Var "s",Val (NumInt 0)])],[],[(Call (Var "std.lib.execute") [Concat (Var "h") (Var "t")],EagerDef (Var "s") (Call (Var "str") [Concat (Var "h") (Var "t")]) (EagerDef (Var "l") (Call (Var "len") [Var "s"]) (EvalExpr (Call (Var "right") [Call (Var "left") [Var "s",Sub (Var "l") (Val (NumInt 1))],Sub (Var "l") (Val (NumInt 2))])))),(Call (Var "std.lib.execute") [List []],Skip)],[(Call (Var "std.lib.split") [Concat (Var "h") (Var "t"),Var "s"],If (Call (Var "bool") [Eq (Var "h") (Var "s")]) (Add (Val (Str "")) (Var "rest")) (EagerDef (Var "rest") (Call (Var "split") [Var "t",Var "s"]) (Add (List [Add (Var "h") (Call (Var "head") [Var "rest"])]) (Call (Var "tail") [Var "rest"])))),(Call (Var "std.lib.split") [List [],Var "s"],Val (Str ""))],[],[],[],[],[],[(Call (Var "std.lib.strip") [Concat (Var "h") (Var "t")],Call (Var "strip") [Concat (Var "h") (Var "t"),Val (Str " ")]),(Call (Var "std.lib.strip") [Concat (Var "h") (Var "t"),Var "s"],Call (Var "rstrip") [Call (Var "lstrip") [Concat (Var "h") (Var "t"),Var "s"],Var "s"])],[],[(Call (Var "std.lib.reverse") [Concat (Var "h") (Var "t")],For "i" (Call (Var "list") [Range (Sub (Call (Var "len") [Concat (Var "h") (Var "t")]) (Val (NumInt 1))) (Val (NumInt 0)) (Prod (Val (NumInt (-1))) (Val (NumInt 1)))]) (Subs (Var "i") (Concat (Var "h") (Var "t"))) [])],[],[],[],[],[(Call (Var "std.lib.qsort") [Concat (Var "h") (Var "t"),Var "n"],Case (Lt (Call (Var "len") [Concat (Var "h") (Var "t")]) (Var "n")) [(Val (Bit True),Concat (Var "h") (Var "t")),(Val (Bit False),Def (Var "less") (Call (Var "filter") [Val (Lambda ["x"] (Gt (Var "h") (Var "x"))),Var "t"]) (Def (Var "more") (Call (Var "filter") [Val (Lambda ["x"] (Lt (Var "h") (Var "x"))),Var "t"]) (Concat (Concat (Call (Var "qsort") [Var "less"]) (Var "h")) (Call (Var "qsort") [Var "more"]))))]),(Call (Var "std.lib.qsort") [List [],Var "n"],List []),(Call (Var "std.lib.qsort") [Var "l"],Call (Var "qsort") [Var "l",Val (NumInt 1)])],[],[],[],[],[(Var "std.lib.version",Val (Proc [Import ["std","version"] ["std","version"]]))],[],[],[],[],[],[],[],[],[],[],[(Var "std.lib.copyright",Val (Proc [Import ["std","copyright"] ["std","copyright"]]))],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]